#!/bin/sh
####################################################################################################
####################################################################################################
####################################################################################################
#####
##### SJ API
#####
####################################################################################################
####################################################################################################
####################################################################################################
##################################################
##### FUNCTIONS
##################################################
printTask(){
  echo "#############################################" >> ${LOG_FILE}
  echo "##### $1"                                      >> ${LOG_FILE}
  echo "#############################################" >> ${LOG_FILE}
}
printStep() {
  echo "###############" >> ${LOG_FILE}
  echo "##### $1"        >> ${LOG_FILE}
  echo "###############" >> ${LOG_FILE}
}
printCustom() {
	echo ""
	echo ""
	echo "=============================="
	echo "   $1"
	echo "=============================="
}
runSql(){
  sqlplus '/as sysdba' <<EOF
  $1
  quit;
EOF
  quit;
}
makeDirectory(){
  if [ ! -e $1 ]; then
    mkdir $1
  fi
}
makeFile(){
  if [ ! -f $1 ]; then
    touch $1
  fi
}
replaceLine(){
  sed -i '/'"$1"'/c'"$2" "$3"
}
replaceProp(){
  sed -i '/^'"$1="'/c'"$1=$2" "$3"
}
replace(){
  sed -i 's/'"$1"'/'"$2"'/g' "$3"
}
printPropValue(){
  echo "$(echo  "`cat ${1} | grep "${2}=" | cut -d '=' -f 2-`")"
}
printPathWinToLin(){
  echo "$(echo "/$1" | sed 's/\\/\//g'  | sed 's/\://g')"
}
printPathLinToWin(){
  echo "$(echo "$1" | sed 's/\///' | sed 's/\//:\//' | sed 's/\\/\//g')"
}
printInteractiveValue(){
	read -p "$1 [$2]: " VALUE
	if [ "$VALUE" = "" ]; then
		VALUE="$2"
	fi
	echo "$VALUE"
}

##################################################
##### Get Relative Path For This App Automatically
##################################################
THIS_FILE="`basename $0`"
THIS_RELATIVE_PATH="`dirname $0`"
THIS_RELATIVE_HOME_PATH="${THIS_RELATIVE_PATH%'/bin'}"
THIS_RELATIVE_HOME_PATH="${THIS_RELATIVE_PATH%'\\bin'}"
THIS_RELATIVE_HOME_PATH="${THIS_RELATIVE_PATH%'\bin'}"
THIS_RELATIVE_HOME_PATH="${THIS_RELATIVE_PATH%'bin'}"
# HOME/bin에서 startup.sh를 실행함.
if [ "$THIS_RELATIVE_HOME_PATH" = "." ]; then
	THIS_RELATIVE_HOME_PATH=".."
# HOME에서 bin/startup.sh를 실행함.
elif [ "$THIS_RELATIVE_HOME_PATH" = "" ]; then
	THIS_RELATIVE_HOME_PATH="."	
fi
##################################################
##### Get Absolute Path For This App Automatically
##################################################
# THIS_ABSOLUTE_DIR_PATH=$(cd "${0%/*}/.."; pwd)
THIS_ABSOLUTE_DIR_PATH=$(cd "$(dirname "$0")/"; pwd)
##################################################
##### SYSTEM VALUE SETUP
##################################################
NOW_DATE="`date +%Y%m%d`"
NOW_TIME="`date +%H%M%S`"
THIS_DIR="$THIS_ABSOLUTE_DIR_PATH"
LOG_PATH="$THIS_HOME/logs"
LOG_FILE="$LOG_PATH/log_${NOW_DATE}_${NOW_TIME}.log"
BAK_PATH="$THIS_HOME/bak"
NOW_PATH=`pwd`

##### CHECK OS
CHECK_OS="`uname -s`"
case "$CHECK_OS" in   
    Darwin*)    THIS_OS="MAC";; 
    Linux*)     THIS_OS="LIN";;   
    MINGW32*)   THIS_OS="WIN";;
    MINGW64*)   THIS_OS="WIN";;
    CYGWIN*)  THIS_OS="WIN";;
esac
echo "OS CHECK = ${CHECK_OS}"
echo "OS is ${THIS_OS}"
echo "This Dir is ${THIS_DIR}"

##### Parameter To Run Installer
REL_PATH_BIN_TO_HOME=../
REL_PATH_HOME_TO_LIB=./lib

##### Get Path
PATH_TO_INSTALLER_HOME=${THIS_DIR}/${REL_PATH_BIN_TO_HOME}
PATH_TO_LIB_DIR=${PATH_TO_INSTALLER_HOME}/${REL_PATH_HOME_TO_LIB}

##### CONVERT TO WIN PATH (JAVA(Win) Needs Windows Path)
if [ "$THIS_OS" = "WIN" ]; then
  PATH_TO_LIB_DIR="`printPathLinToWin "$PATH_TO_LIB_DIR"`"
fi

##### Run Jar
java -cp "${PATH_TO_LIB_DIR}/*" install.Start "$@"