apply plugin: "groovy"
apply plugin: "java"
apply plugin: "application"
apply plugin: "idea"

/**************************************************
 *
 * SETUP
 *
 **************************************************/
buildscript {
    ext {
        groovyVersion = '2.1.3'
    }
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'http://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url "https://jitpack.io" }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

/*************************
 * SOURCE SET
 *************************/
sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/java']
        }
    }

    test {
        groovy {
            srcDirs = ['src/test/java']
        }
    }
}

/**************************************************
 *
 * Define Variable&Function
 *
 **************************************************/
sourceCompatibility = "1.6"
targetCompatibility = "1.6"

String projectName = "installer-maker"
version = "git describe --tags".execute([], project.projectDir).text.trim()
applicationName = projectName
group = "jaemmisseo"
mainClassName = "install.Starter"

String distributionPath = "${buildDir}/distributions"
String libFileName = "${projectName}-${version}"
String SystemEnv_INSTALLER_MAKER_HOME = "$System.env.INSTALLER_MAKER_HOME"
boolean modeRemoteDependencies = project.hasProperty('remote')
boolean hadDeployment = false
List<Dependency> moduleList = []

ext.getString = { String propertyName -> return project.hasProperty(propertyName) ? project.property(propertyName) : null }
ext.getBoolean = { String propertyName -> return project.hasProperty(propertyName) && (!project.property(propertyName) || project.property(propertyName) == 'true') }
ext.getDependency = { String dependencyString ->
    String name = dependencyString.split(':').toList()[1]
    return (modeRemoteDependencies) ? dependencyString : project(":${name}")
}

static void printSubject(String subjectName){
    println "\n========================="
    println "= ${subjectName}"
    println "========================="
}

static int getLongestLength(List list, String fieldName){
    return getLongestLength( list.collect{it[fieldName]} )
}

static int getLongestLength(List<String> list){
    int longestLength = -1
    list.each{ def text ->
        int length = text?.length()
        if (longestLength < length)
            longestLength = length
    }
    return longestLength
}

static String getSpacesToLineUp(String stringItem, int bestLongerLength){
    return (stringItem.length() < bestLongerLength) ? (1..(bestLongerLength - stringItem.length())).collect{' '}.join('') : ''
}

static Dependency getDependencyFromDependencyString(String dependencyString){
    List projectItems = dependencyString.split(':').toList()
    return new Dependency(dependencyString: dependencyString, path:projectItems[0], name:projectItems[1], branchName:'', version:projectItems[2] ?: '')
}

static String getUserSetedVersionFromModuleList(List dependencyStringList, String moduleName){
    String dependencyString = dependencyStringList.find{ String dependencyString ->
        Dependency dependency = getDependencyFromDependencyString(dependencyString)
        return dependency.name == moduleName
    }
    return (dependencyString) ?: ''
}

class Dependency {
    String dependencyString
    String path
    String name
    String branchName
    String version
}



/**************************************************
 *
 * Dependencies
 *
 **************************************************/
repositories {
    jcenter()
    maven { url "http://central.maven.org/maven2/" }
    maven { url "https://jitpack.io" }
    maven { url 'http://repo.spring.io/milestone' }
    maven { url "http://maven.springframework.org/release" }
}
List<String> subprojectList = [
        'com.github.avaj-java:common-util:0.3.7.4',
        'com.github.avaj-java:command-man:0.5.2',
        'com.github.avaj-java:common-man:0.4.1',
        'com.github.avaj-java:fileman:0.4.1',
        'com.github.avaj-java:reportman:0.3.2',
        'com.github.avaj-java:restman:0.3.2'
]
List<String> dependencyList = [
        'org.codehaus.groovy:groovy-all:2.1.3',
        'org.slf4j:slf4j-api:1.7.7',
        'ch.qos.logback:logback-classic:1.2.3',
        'ch.qos.logback:logback-core:1.2.3',
        'org.fusesource.jansi:jansi:1.16',
        'com.sun.mail:javax.mail:1.5.5',
//        "com.oracle:ojdbc6:11.2.0.3",
        'org.yaml:snakeyaml:1.18',
        'com.jcraft:jsch:0.1.54'
]
dependencies {
    //JAEMISSEO
    subprojectList.each{ compile(getDependency(it)) }
    //Others
    dependencyList.each{ compile(it) }
    //Test
    testCompile "junit:junit:4.11"

    /** Local File System으로부터 참조(*.jar) **/
    compile fileTree(dir: 'external_lib', include: ['*.jar'])
    compile fileTree(dir: 'external_lib_dev', include: ['*.jar'])
}

//- (JAR빌드시) 개발용 개발시에만 필요한(배포시에는 필요없는) 파일 제외하기
jar.rootSpec.exclude( fileTree(dir: 'external_lib_dev', include: ['*.jar']).collect{ "**/${it.name}" } )



/**************************************************
 *
 * Setup Each Sub Projects
 *
 **************************************************/
subprojects {
    /*************************
     * Gethering Module's Git Info
     *************************/
    moduleList << new Dependency(
            name        : project.name,
            branchName  : 'git rev-parse --abbrev-ref HEAD'.execute([], project.projectDir).text.trim(),
            version     : 'git describe --tags'.execute([], project.projectDir).text.trim()
    )
    group = 'jaemmisseo'
    version = moduleList[(moduleList.size()-1)].version

    //Message to Sub Gradle
    ext.setProperty('modeParentRemoteDependencies', modeRemoteDependencies)
}

if (modeRemoteDependencies){
    moduleList = subprojectList.collect{ String dependencyString -> getDependencyFromDependencyString(dependencyString) }
}



/**************************************************
 *
 * Print Information
 *
 **************************************************/
/*************************
 * Print Java Version
 *************************/
printSubject "Check - Java"
println ' - Compile Environment '
exec{ executable 'java';  args "-version"; }

/*************************
 * Print Module's Git Info
 *************************/
printSubject "Check - Git"
// Get best long length 'moduleName' and 'branchName' to adjust spacing
int bestLongModuleNameLength = getLongestLength(moduleList, 'name')
int bestLongBranchNameLength = getLongestLength(moduleList, 'branchName')
// Adjust spacing And Print Git Module, Branch, Version
moduleList.each{ Dependency module ->
    String moduleNameSpace = getSpacesToLineUp(module.name, bestLongModuleNameLength)
    String branchNameSpace = getSpacesToLineUp(module.branchName, bestLongBranchNameLength)
    println " - ${module.name}${moduleNameSpace} (${module.branchName})${branchNameSpace} Version. ${module.version}"
}

/*************************
 * Print Build Options
 *************************/
printSubject "Check - Build Option"
// Print
println "[${modeRemoteDependencies?'v':' '}] Remote Dependencies Mode( -Premote )"

/*************************
 * Print Next
 *************************/
printSubject "Check - Start Task"



/**************************************************
 *
 * Tasks 
 *
 **************************************************/
/*************************
 *
 * TASK - jar
 *
 *************************/
/** Before jar **/
task writeVersion {
    doFirst{
        printSubject "Generate - metadata"
    }
    doLast{
        new File("$buildDir/resources/main/.version").write(version)
        new File("$buildDir/resources/main/.compiler").write("Java ${System.getProperty('java.version')}")
        new File("$buildDir/resources/main/.date").write(new Date().toString())
        new File("$buildDir/resources/main/.libtohome").write('../')
        new File("$buildDir/resources/main/.version").write(version)
    }
}

task copyHoyaTargetClasses(type: Copy) {
    doFirst{
        printSubject "Copy - Hoya's target classes"
    }
    from "${buildDir}/scan-target-classes"
    into "${buildDir}/resources/main/scan-target-classes"
    doLast{
        new File("${buildDir}/resources/main/scan-target-classes").listFiles().each{ println it }
        println ""
    }
}

jar {
    dependsOn copyHoyaTargetClasses, writeVersion

    /** MANIFEST **/
    manifest {
        attributes  'Title': projectName, 'Version': version, 'Main-Class': mainClassName
    }

    /** Jarfile Name **/
    archiveName "${libFileName}.jar"

    /** Extracted All Dependencies To jar **/
//    dependsOn configurations.runtime
//    from {
//        configurations.compile.collect {it.isDirectory()? it: zipTree(it)}
//    }

    /** All Dependencies to lib folder in jar **/
//    into('lib') {
//        from configurations.runtime
//    }
}

/*************************
 *
 * TASK - distZIp
 *
 *************************/
/** Before distZip **/
distributions{
    main.contents.into("bin"){
        from([
                "src/main/resources/binForBuilder/hoya",
                "src/main/resources/binForBuilder/hoya.bat",
        ])
        fileMode 0755
    }
}

distZip {
    archiveName "${libFileName}.zip"
    doLast{
        printSubject "Check - Distribution (Path: ${distributionPath} )"
        new File(distributionPath).listFiles().each{ println it }
    }
}

/*************************
 *
 * TASK - distTar
 *
 *************************/
distTar {
    archiveName "${libFileName}.tar"
    doLast{
        printSubject "Check - Distribution (Path: ${distributionPath} )"
        new File(distributionPath).listFiles().each{ println it }
    }
}


/*************************
 *
 * TASK - build
 *
 *************************/
/** Before build **/
task extractZipToTemp(type: Copy){
    from zipTree("${distributionPath}/${libFileName}.zip")
    into "${distributionPath}"
    doLast{
        file("${distributionPath}/${libFileName}").renameTo(file("${distributionPath}/${projectName}"))
    }
}

build.dependsOn extractZipToTemp, copyHoyaTargetClasses, writeVersion


/*************************
 *
 * TASK - deployLocal
 *  - Deploy to INSTALLER_MAKER_HOME
 *
 *************************/
/** Before deployLocal **/
task cleanHome(type: Delete){
    hadDeployment = new File(SystemEnv_INSTALLER_MAKER_HOME).exists()
    delete SystemEnv_INSTALLER_MAKER_HOME
    doLast{
        if (hadDeployment){
            printSubject "Deleted Before-Deployment!!! (Path: ${SystemEnv_INSTALLER_MAKER_HOME} )"
        }
    }
}

task deployLocal(type: Copy){
    dependsOn distZip, extractZipToTemp, cleanHome
    from "${distributionPath}/${projectName}"
    into SystemEnv_INSTALLER_MAKER_HOME
    doLast{
        printSubject "${(hadDeployment)?'Re-Deployed':'Newly-Deployed'} !!! (Path: ${SystemEnv_INSTALLER_MAKER_HOME} )"
        new File(SystemEnv_INSTALLER_MAKER_HOME).listFiles().each{ println it }
    }
}


