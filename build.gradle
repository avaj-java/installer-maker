apply plugin: "groovy"
apply plugin: "java"
apply plugin: "application"
apply plugin: "idea"

/*************************
 *
 * SETUP
 * 
 *************************/
sourceCompatibility = "1.6"
targetCompatibility = "1.6"

String projectName = "installer-maker"
version = "git describe --tags".execute([], project.projectDir).text.trim()
applicationName = projectName
group = "jaemmisseo"
mainClassName = "install.Starter"
String distributionPath = "${buildDir}/distributions"
String libFileName = "${projectName}-${version}"
String SystemEnv_INSTALLER_MAKER_HOME = "$System.env.INSTALLER_MAKER_HOME"

buildscript {
    ext {
        groovyVersion = '2.1.3'
    }
    repositories {
        mavenCentral()
        maven {
            url 'http://repo.spring.io/milestone'
        }
    }
    dependencies {
//        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

/*************************
 * 
 * SOURCE SET
 *
 *************************/
sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/java']
        }
    }

    test {
        groovy {
            srcDirs = ['src/test/java']
        }
    }
}



/*************************
 *
 * JAR
 *
 *************************/
/** Before jar **/
task writeVersion << {
    new File("$buildDir/resources/main/.version").write(version)
    new File("$buildDir/resources/main/.compiler").write("Java ${System.getProperty('java.version')}")
    new File("$buildDir/resources/main/.date").write(new Date().toString())
    new File("$buildDir/resources/main/.libtohome").write('../')
}

jar {
    dependsOn writeVersion

    /** MANIFEST **/
    manifest {
        attributes  'Title': projectName, 'Version': version, 'Main-Class': mainClassName
    }

    /** Jarfile Name **/
    archiveName "${libFileName}.jar"

    /** Extracted All Dependencies To jar **/
//    dependsOn configurations.runtime
//    from {
//        configurations.compile.collect {it.isDirectory()? it: zipTree(it)}
//    }

    /** All Dependencies to lib folder in jar **/
//    into('lib') {
//        from configurations.runtime
//    }
}

/*************************
 *
 * DIST ZIP
 *
 *************************/
/** Before distZip **/
applicationDistribution.from([
        "src/main/resources/binForBuilder/macgyver",
        "src/main/resources/binForBuilder/macgyver.bat",
]){
    into "bin"
}

distZip {
    archiveName "${libFileName}.zip"
}

/*************************
 *
 * DIST TAR
 *
 *************************/
distTar {
    archiveName "${libFileName}.tar"
}


/*************************
 *
 * BUILD
 *
 *************************/
/** Before build **/
task extractZipToTemp(type: Copy){
    from zipTree("${distributionPath}/${libFileName}.zip")
    into "${distributionPath}"
    doLast{
        file("${distributionPath}/${libFileName}").renameTo(file("${distributionPath}/${projectName}"))
    }
}

build.dependsOn extractZipToTemp


/*************************
 *
 * deployLocal
 *  - Deploy to INSTALLER_MAKER_HOME
 *
 *************************/
/** Before deployLocal **/
task cleanHome(type: Delete){
    delete SystemEnv_INSTALLER_MAKER_HOME
}

task deployLocal(type: Copy){
    dependsOn distZip, extractZipToTemp, cleanHome
    from "${distributionPath}/${projectName}"
    into SystemEnv_INSTALLER_MAKER_HOME
}











/*************************
 *
 * Dependencies
 *
 *************************/
repositories {
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url 'http://repo.spring.io/milestone' }
    maven { url "http://maven.springframework.org/release" }
}

dependencies {

    //JAEMISSEO
    compile "com.github.avaj-java:common-util:0.1.62"
    compile "com.github.avaj-java:common-man:0.1.63"
    compile "com.github.avaj-java:fileman:0.1.63"
    compile "com.github.avaj-java:reportman:0.0.1"
    compile "com.github.avaj-java:restman:0.0.1"

    //GROOVY
    compile 'org.codehaus.groovy:groovy-all:2.1.3'

    //MAIL
    compile 'com.sun.mail:javax.mail:1.5.5'

    //JDBC
    compile "com.oracle:ojdbc6:11.2.0.3"

    //TEST
    testCompile "junit:junit:4.11"
}

